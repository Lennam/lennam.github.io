<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nam&#39;s</title>
    <link>https://www.nams.site/</link>
    <description>Recent content on Nam&#39;s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 08 Apr 2020 20:51:49 +0800</lastBuildDate>
    
	<atom:link href="https://www.nams.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>函数式编程(二)</title>
      <link>https://www.nams.site/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BA%8C/</link>
      <pubDate>Wed, 08 Apr 2020 20:51:49 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%BA%8C/</guid>
      <description>上一篇介绍了函数式编程的一些概念，接下来我会结合前端这个特定领域介绍一些函数式编程的应用。
对于前端而言，终极的目的是生成用户UI，与过去简单的静态页面不同，如今的前端充斥着大量的状态和数据，如果我们继续命令式地操作Dom，可以想像将是一场灾难。
而随着MVVM模式的诞生，许多框架选择把视图层抽象出来，比如React的Jsx和Vue的模版引擎，它们都为我们提供了另一种创建UI的思路：
UI = Render(Data)
这样我们就可以只专注于Data的编写，而把渲染的过程交给框架，而框架也可以利用这一点解耦HTML，为不同的平台提供不同的渲染器，从而促成了RN和Weex之类的库的诞生。当然，现在也无从考证是函数式思想影响了这些框架引入抽象视图层，还是框架选择抽象试图无意间和函数式编程所吻合。
诚然，如果我们的应用越来越大，视图也会随之增多，每个组件之间势必会多出一些冗余的数据并且组件的交互也更加繁琐：
如果我们把冗余的数据提取成单独的一层，势必会让我们的组件更加精简：
所以一众状态管理的库也因此诞生，其中又以Redux和函数式的关系最为紧密。
与CURD类型的状态管理库不同，redux采用了另一种思路：Event Sourcing。在这种体系下，我们只存储事件的记录，而不存储具体状态，当我们需要具体状态时，我们只要从头开始计算所有的事件即可，所以redux给我们提供了强大的状态追踪功能，我们可以方便的进行状态的时间旅行。
对于事件来说，它只描述发生了什么，具体的应用状态，我们需要Reducer进行计算，我们可以把状态计算的过程抽象为下面的式子：
newState = reducer(oldState, action)  每一次产生事件，redux都会根据旧的状态和事件产生出一个新的状态，让react重新渲染视图，所以整个生命周期中，状态的迭代过程如下：
除了redux之外，还有另一个我们熟知的库：Rxjs。
在谈Rxjs之前，我们先说说函数响应式编程（Functional Reactive Programming）。简单的说，它就是采用函数式编程的方法进行响应式编程的编程范式。
响应式编程有以下几个特点：
 事件驱动 可拓展性 可伸缩性  用户界面和网络请求都是基于事件的，所以函数响应式编程特别适合于Web应用，而Rxjs则是目前使用最为广泛的库。
在Rxjs中，把所有的事件都看成了流。作为响应式编程的核心，流的本质是一个按时间顺序排列的进行中事件的序列集合，而Rxjs提供了许多操作流的方法，让我们可以在更高的抽象维度去进行编程。比如当我们需要过滤出连续点击两次或更多事件时，在rxjs中我们可以这样操作：我们使用原生js需要大量代码才能实现的功能，在rxjs中只需要几个操作就可以完成。
如今的软件开发已经越来越复杂，使用单一的某种思想或工具已经无法应对越来越多的难题。还是那句话，在计算机科学里没用绝对的最佳实践，我们需要对不同的问题采取不同的解决方法，而每学习一种新的思想，都会帮助我们拓宽解决问题的思路。</description>
    </item>
    
    <item>
      <title>函数式编程(一)</title>
      <link>https://www.nams.site/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%80/</link>
      <pubDate>Sun, 07 Apr 2019 14:15:39 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%80/</guid>
      <description>在了解函数式编程之前，我们先来讨论一个问题：什么函数？
编程时，我们在谈论函数的时候，总是默认它为命令式编程里的子程序。
子程序，英文里称为subroutine或者subprogram，顾名思义，就是指一个计算机程序中的某部分代码，它由一个或多个语句块组成它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。
function (x) { … }  它一般类似于这种形式，会有输入参数并有返回值，提供对过程的封装和细节的隐藏，但是，在我们接下来的讨论中，我希望大家忘记函数的这种形式，因为我们即将进入数学里的函数，如果你把编程时常写x=x+1给你的数学老师看，他应该会打你吧。
在数学里，我们可以把函数看作两个不为空的集合间的一种对应关系，输入值集合中的每项元素皆能对应唯一一项输出值集合中的元素。例如实数x对应到其平方x2的关系就是一个函数，若以3作为此函数的输入值，所得的输出值便是9：
我们用数学式把这个关系写出来就是一个我们每个人都见过的式子：
函数将有效的输入值变换为唯一的输出值，同一输入总是对应同一输出，但反之未必成立。因此如Root(x)=正负sqrt(x)这样的表达式并没有定义出一个函数，因为输出值有两个可能。定义函数时需确定每一个输入值只对应唯一输出值，因此必须明确地选择一个平方根。例如定义Posroot(x)=sqrt(x)，亦即对于任何非负输入值，选择其非负平方根作为函数值。
那么什么是函数式编程呢？
我们先对它下一个定义：它是一种以Lambda为其语言基础的编程范式，就像面向对象编程，命令式编程一样，是一类典型的编程风格。
Lambda演算是一套从数学逻辑中发展，以变量绑定和替换的规则，来研究函数如何抽象化定义、函数如何被应用以及递归的形式系统。它是一种抽象计算模型，是解决可计算问题的一种方案，通俗来讲，就是将计算以数学的方式抽象化，以便证明和推导。
Lambda演算的定义为：
比如我们定一个lambda表达式：
当这个表达式应用于具体的变量时，需要用一对括号把表达式括起来，应用过程是把变量值赋值给表达式中的x，并去掉 λ&amp;lt;变量&amp;gt;：
看到这里是不是熟悉了很多，这其实就对应着程序语言中的函数定义，参数传递，函数调用。函数式编程语言Lisp表达的也正是这种形式。
那如果是多个变量呢？
可能有人会有疑问，如果以lambda演算为语言基础，那么语言中的boolean、number、list这些数据类型怎么办？
有这种疑问的同学，你距离真正的乐趣已经很近了，Lambda演算有其强大的秘笈，那就是不关心数据的值是什么，重点是能对这个值做什么操作。
以布尔值为例大家想一想我们平时都把布尔值用在什么地方？
对，条件判断。
因为其实我们是无法直观的看出一个值是true还是false，而是根据条件判断返回的值来判断，在Lambda演算中，我们可以这样定义布尔值（感兴趣的同学可以自己去搜索一下推导过程）：
介绍完Lambda，下面我们来定义一下函数式编程范式：
在函数式的编程范式里，把计算机运算视为函数运算，也就是说一个程序会被看作是一个无状态的函数计算的序列；最后，在函数式编程里，应该避免使用程序状态以及易变对象。
之前我们介绍了的数学里的函数，函数的运算，也就是一个映射的过程。这听起来很抽象，我们先来举个例子，假如现在你正在面试，面试官出了一道题给你：把二叉树镜像翻转一下。然后你不假思索，写下了如下代码：
function invertTree(node) { if (!node) return; [node.left, node.right] = [invertTree(node.right), invertTree(node.left)]; return node; }  好了，我们现在停下来看看这段代码究竟代表着什么：首先判断节点是否为空；然后翻转左树；然后翻转右树；最后左右互换。这就是命令式编程——你要做什么事情，你得把达到目的的步骤详细的描述出来，然后交给机器去运行。
这也正是命令式编程的理论模型——图灵机的特点。一条写满数据的纸带，一条根据纸带内容运动的机器，机器每动一步都需要纸带上写着如何达到。
我们用函数的思维来重新思考一下这个问题，所谓“翻转二叉树”，可以看做是要得到一颗和原来二叉树对称的新二叉树。这颗新二叉树的特点是每一个节点都递归地和原树相反。基于这种映射关系，我们重新写出以下的代码：
function invertTree(node) { // 省略Tree和invert的实现 if(!node) return; return Tree(node.value, invert(node.right), invert(node.left)); }  乍一看与之前的代码区别并不大，只是创建了一个新的树并返回，但其得到结果的方式与之前的代码有着本质的差别，这段代码通过描述一个旧树-&amp;gt;新树的映射，而不是描述「从旧树得到新树应该怎样做」来达到目的。
这就是函数运算，它是“对映射和关系的描述”，它不仅可以描述二叉树这样的数据结构之间的对应关系，任何能在计算机中体现的东西之间的对应关系都可以描述——比如函数和函数之间的映射；比如外部操作到 GUI 之间的映射。我们把寻找这种映射关系的过程抽象，也就是推导lambda演算的过程。
正如平时我们都知道的函数式法则一样，不要去修改传入的值，而是根据它去计算一个新的值。这正是imutable的思想，也是之后React、Redux等框架的基石。
但凡事都有正反两面，函数式编程也不例外。
首先最明显的好处就是引用透明和没有副作用，函数调用的结果不依赖调用的时间和位置，对于相同的输入，函数总是返回相同的输出，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试都更容易。此外，如今计算机计算能力的增长已经不依赖CPU主频的增长，而是依赖CPU核数的增多，在多核环境下的程序设计的难点就在于对共享可变状态的管理，函数即不依赖外部的状态也不修改外部的状态，使得并行更加容易。而函数作为一等公民，可以在任何地方定义，在函数内或函数外，可以作为函数的参数和返回值，也可以对函数进行组合。
当然，它的缺点也很明显：
如果某个映射关系很复杂，需要许多函数组合运算，过长的函数组合可能会影响代码的可读性。其次在函数式编程中没有循环，所以必须使用递归来达到循环的功能，这对编写带来了挑战，因为没有可变的状态来存储中间值，在一些复杂运算中需要更多的内存和计算时间，这将导致性能的下降。</description>
    </item>
    
    <item>
      <title>How to use Proxy</title>
      <link>https://www.nams.site/posts/how-to-use-proxy/</link>
      <pubDate>Sat, 03 Feb 2018 14:31:29 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/how-to-use-proxy/</guid>
      <description>今天看到一篇关于Proxy的文章，挺有意思，所以翻译一下。
原文地址：How to use JavaScript Proxies for Fun and Profit
以下是翻译：
Javascript最近有一个新鲜的但未得到广泛使用的特性：JavaScript proxies.
使用Javascript proxies你可以包装一个现有的对象，并拦截对其属性或者方法的访问，即使这些属性或方法并不存在！
Hello World Proxy 让我们从一个基本的‘hello world’例子开始吧：
const wrap = obj =&amp;gt; { return new Proxy(obj, { get(target, propKey) { console.log(`Reading property &amp;quot;${propKey}&amp;quot;`) return target[propKey] } }) } const object = { message: &#39;hello world&#39; } const wrapped = wrap(object) console.log(wrapped.message)  这段代码输出：
Reading property &amp;quot;message&amp;quot; hello world  在这个例子中，我们只是访问对象的属性和方法前做了一些事。然后我们返回了原本的属性和方法。
你也可以用一个set函数来拦截对属性的修改。
这可能可以用于验证属性或类似的东西，但我认为这个新特性很有前景，我希望一些已Proxy为核心功能的框架出现。所以我一直在思考这些问题，然后有了一些创意：
一个20行代码关于API的SDK 如上所述，你可以拦截一个方法的调用…甚至这个方法不存在。当一个被Proxy代理的对象上的方法被调用时，get函数会被调用并返回一个动态生成的函数。如果不需要，你完全可以不去触碰被代理的对象。
根据这个思维，你可以解析被调用的方法，并在运行的时候动态实现它的功能！举个栗子，当我们使用api.getusers()调用的时候，可以用代理在API中创建一个GET/users。通过这个约定我们可以更进一步，让api.postItems({name: ‘Item name’})使用第一个参数作为请求主体来调用POST/items。</description>
    </item>
    
    <item>
      <title>一道面试题</title>
      <link>https://www.nams.site/posts/%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2018 22:15:22 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>今天在知乎上看到一道JavaScript面试题:
var x = 20; var a = { x : 15, fn : function(){ var x = 30; return function(){ return this.x; }; } }; console.log(a.fn()); console.log((a.fn())()); console.log(a.fn()()); console.log(a.fn()() == (a.fn())()); console.log(a.fn().call(this)); console.log(a.fn().call(a));  第一个console.log输出:
function (){ return this.x; }  第二个console.log输出:
20  根据第一个输出，我们可以把第二个式子改为
console.log((function (){ return this.x; })());  这里的this指向全局对象，立即执行a.fn()返回全局变量x。 第三个console.log输出:
20  这里和第二输出的式子有些不同，函数式少了一个括号
console.log(function (){ return this.x; }());  我们在控制台输入下面的代码:
function (){ return this.x;	}()； //报错  这时控制台会报错，而当我们在函数外面加一个括号时:</description>
    </item>
    
    <item>
      <title>Js里的继承</title>
      <link>https://www.nams.site/posts/js%E9%87%8C%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Tue, 02 Jan 2018 16:50:08 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/js%E9%87%8C%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>在其他的OO语言中，最常见的两种继承方式是接口继承和实现继承。
我们知道，在JS中函数是没有签名的，函数的命名参数只是为了便利，并不是必须的，就算没有命名参数，我们还可以通过arguments获得传入函数的参数，就是这么随意~
原型链 我们知道每个构造函数都有一个原型对象，原型对象又有一个指向构造函数的指针，而实例内部也有一个指向原型对象的指针，如果我们让原型对象指向另一个类型的实例，这时原型对象将包含一个指向另一个原型对象的指针，而另一个原型对象又是另一个类型的实例，如此层层递进，就形成了原型链：
function SuperType() { .... } function SubType() { .... } SubType.prototype = new SuperType();  当然，原型链存在一些问题，包含引用类型的原型属性会被所有实例共享，通过原型链进行继承的时候，原型会变成另一个类型的实例，于是，原先的实例属性也会变成现在的原型属性：
function SuperType() { this.names = [&#39;Nam&#39;, &#39;Leenam&#39;, &#39;Yang&#39;]; } function SubType() { } SubType.prototype = new SuperType(); const instance1 = new SubType(); instance1.names.push(&#39;Neil&#39;); console.log(instance1.names); // [&amp;quot;Nam&amp;quot;, &amp;quot;Leenam&amp;quot;, &amp;quot;Yang&amp;quot;, &amp;quot;Neil&amp;quot;] const instance2 = new SubType(); console.log(instance2.names); // [&amp;quot;Nam&amp;quot;, &amp;quot;Leenam&amp;quot;, &amp;quot;Yang&amp;quot;, &amp;quot;Neil&amp;quot;]  借用构造函数 在使用原型链的继承中，为了解决引用类型值的问题，开发人员开始使用一种叫做借用构造函数的方法，，即在子类型的构造函数中调用超类型的构造函数：
function SuperType() { this.names = [&#39;Nam&#39;, &#39;Leenam&#39;, &#39;Yang&#39;]; } function SubType() { // 借用构造函数 SuperType.</description>
    </item>
    
    <item>
      <title>对象的创建</title>
      <link>https://www.nams.site/posts/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Wed, 27 Dec 2017 13:38:13 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</guid>
      <description>在说面向对象前，我们先说一下对象的创建吧。
我们知道在创建单个对象的时候，我们可以可以使用Object构造函数或者对象字面量的方式：
// 使用Object创建对象 var person = new Object(); person.name = &#39;Nam&#39;; person.age = 18; // 使用对象字面量创建对象 var person = { name: &#39;Nam&#39;, age: 18 }  当我们需要创建许多对象的时候，这些方式会产生大量的代码。为了解决这个，人们开始运用工厂模式。
工厂模式 众所周知，js中是无法创建类的，所以就诞生了一种函数：
function createPerson(name) { let o = new Object(); o.name = name; o.say = function() { console.log(this.name) }; return o; } const person1 = createPerson(&#39;Nam&#39;); person1.say();  这样做创建对象倒是快了，当我们不知道这个对象是什么类型的啊：
person1.contructor; // function Object() {...}  构造函数 由于工厂模式创建的对象都是些孤儿，所以我们创建一个类似于原生Object（）的构造函数：
function Person(name) { this.name = name; this.</description>
    </item>
    
    <item>
      <title>This指向</title>
      <link>https://www.nams.site/posts/this%E6%8C%87%E5%90%91/</link>
      <pubDate>Sun, 22 Oct 2017 15:15:09 +0800</pubDate>
      
      <guid>https://www.nams.site/posts/this%E6%8C%87%E5%90%91/</guid>
      <description>刚学JS时，总是对this的指向摸不着头脑，所以对它的使用，总是小心翼翼，能避就避，但在一些场景中，不使用this，会让代码变得丑陋。比如：
function sayHi() { return &#39;Hello, I&#39;m &#39; + this.name; } const me = { name: &#39;Nam&#39; } sayHi.call(me); // Hello,I&#39;m Nam // 而当我们不使用this时，必须要显示的传入一个上下文对象 function sayHi(obj) { return &#39;Hello, I&#39;m &#39; + obj.name; } const me = { name: &#39;Nam&#39; } sayHi(me); // Hello,I&#39;m Nam  显然，this提供了一种更优雅的方式来隐式的传递一个对象。当我们使用的模式越来越复杂，显示的传递上下文对象会让代码变得越来越混乱，使用this就可以很好的解决这个问题。
this的指向 关于this的指向，总有一个原则：this总是指向调用调用函数的那个对象。
我们来看具体的栗子：
1.独立函数调用 var a = 1; function say() { console.log(this.a) } say(); // 1 // 当我们使用严格模式的时候 var a = 1; function say() { ‘use strict&#39;; console.</description>
    </item>
    
    <item>
      <title>Js的基本类型</title>
      <link>https://www.nams.site/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.nams.site/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid>
      <description>Javascript的内置类型总共有7种：
 Undefined Null String Number Boolean Symbol（ES6新增） Object  其中除了Object为引用类型外，其他都为基本类型。
我们可以使用 typeof 操作符来检测基本类型：
typeof undefined === &#39;undefined&#39;; // true typeof &#39;Nam&#39; === &#39;string&#39;; // true typeof 1106 === &#39;number&#39;; // true typeof true === &#39;boolean&#39;; // true typeof Symbol() === &#39;symbol&#39;; // true // 当我们使用typeof操作符对null进行验证的时候 typeof null; // ‘object&#39;, What?  可以看到，我们typeof null返回的是object类型，这是一个特殊情况，正确的返回应该是null，但是这个bug由来已久，在javascript中存在了近20年，如果对它进行修复，会牵扯到太多web系统，将会产生更多的bug，所以这个问题也许永远得不到修复了…
如果我们想检测null的类型，可以使用复合条件：
const a = null; (!a &amp;amp;&amp;amp; typeof a === &#39;object); // true  在javascript中，变量是没有类型的，只有值才有。</description>
    </item>
    
  </channel>
</rss>